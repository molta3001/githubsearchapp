package com.moltaworks.githubsearchapp.di

import android.content.Context
import android.util.Log
import com.moltaworks.githubsearchapp.Constant.BASE_URL
import com.moltaworks.githubsearchapp.api.GitHubApi
import com.moltaworks.githubsearchapp.data.Repository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import ir.logicbase.mockfit.MockFitConfig.REQUEST_TO_JSON
import ir.logicbase.mockfit.MockFitInterceptor
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideApi(api: GitHubApi): Repository = Repository(api)

    @Provides
    @Singleton
    fun getApi(retrofit: Retrofit): GitHubApi = retrofit
        .create(GitHubApi::class.java)

    @Provides
    @Singleton
    internal fun retrofit(client: OkHttpClient): Retrofit =
        Retrofit.Builder()
            .client(client)
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

    @Provides
    @Singleton
    internal fun client(logging: HttpLoggingInterceptor, mockFitInterceptor: MockFitInterceptor): OkHttpClient =
        OkHttpClient.Builder()
            // .addInterceptor(mockFitInterceptor) // Mock JSON (set mockFitEnable = true to enable)
            // .addInterceptor(logging) // LOG okHttp
            .connectTimeout(20L, TimeUnit.SECONDS)
            .writeTimeout(20L, TimeUnit.SECONDS)
            .readTimeout(30L, TimeUnit.SECONDS)
            .build()

    @Provides
    @Singleton
    internal fun interceptor(): HttpLoggingInterceptor = HttpLoggingInterceptor().setLevel(
        HttpLoggingInterceptor.Level.BODY)

    @Provides
    @Singleton
    internal fun provideMockFitInterceptor(@ApplicationContext context: Context) = MockFitInterceptor(
        bodyFactory = { input -> context.resources.assets.open(input) }, // read asset file
        logger = { tag, message -> Log.d(tag, message) }, // pass logger to log events in logcat
        baseUrl = BASE_URL, // base url of your api
        requestPathToJsonMap = REQUEST_TO_JSON, // autogenerated constant, just press build button
        mockFilesPath = "mock_json", // path to json files
        mockFitEnable = false, // !! master setting to enable or disable mocking !!
        apiEnableMock = true, // enable or disable mock when there are includes and excludes configs
        apiIncludeIntoMock = arrayOf(), // include endpoint if `apiEnableMock` is false
        apiExcludeFromMock = arrayOf(), // exclude endpoint if `apiEnableMock` is true
        apiResponseLatency = 500L // latency of retrieving data
    )
}